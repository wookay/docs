var documenterSearchIndex = {"docs":
[{"location":"#H3.jl","page":"Home","title":"H3.jl â¬¡","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"https://github.com/wookay/H3.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"H3.jl provides a Julia version of H3, Hexagonal hierarchical geospatial indexing system. https://github.com/uber/h3","category":"page"},{"location":"","page":"Home","title":"Home","text":"using H3.API\n\nbase = latLngToCell(LatLng(deg2rad(0), deg2rad(0)), 5)\nrings = gridDisk(base, 1)\n\nx = Vector{Float64}()\ny = Vector{Float64}()\nfor boundary in cellToBoundary.(rings), geo in boundary\n    push!(x, geo.lng)\n    push!(y, geo.lat)\nend\n\nusing UnicodePlots\n@info :plot scatterplot(x, y)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: plot.png)","category":"page"},{"location":"API/#H3.API","page":"API","title":"H3.API","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"note: Note\ndescriptions are taken fromhttps://h3geo.org/docs/\nhttps://github.com/uber/h3/blob/master/src/h3lib/include/h3api.h.in","category":"page"},{"location":"API/#Error-handling","page":"API","title":"Error handling","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"H3ErrorCode","category":"page"},{"location":"API/#H3.API.H3ErrorCode","page":"API","title":"H3.API.H3ErrorCode","text":"The type returned by most H3 functions is H3Error, a 32 bit integer type with the following properties:\n\nH3Error will be an integer type of 32 bits, i.e. uint32_t. H3Error with value 0 indicates success (no error). No H3Error value will set the most significant bit. As a result of these properties, no H3Error value will set the bits that correspond with the Mode bit field in an H3Index. 32 bit return codes with the high bit never set allows for mixing error codes and resulting indexes if desired by the application, after copying the error codes into the result buffer.\n\n\n\n\n\n","category":"type"},{"location":"API/#Indexing-functions","page":"API","title":"Indexing functions","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"latLngToCell\ncellToLatLng\ncellToBoundary","category":"page"},{"location":"API/#H3.API.latLngToCell","page":"API","title":"H3.API.latLngToCell","text":"latLngToCell(g::LatLng, res::Int)::Union{H3ErrorCode, H3Index}\n\nfind the H3 index of the resolution res cell containing the lat/lng\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.cellToLatLng","page":"API","title":"H3.API.cellToLatLng","text":"cellToLatLng(h::H3Index)::Union{H3ErrorCode, LatLng}\n\nfind the lat/lng center point g of the cell h3\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.cellToBoundary","page":"API","title":"H3.API.cellToBoundary","text":"cellToBoundary(h::H3Index)::Union{H3ErrorCode, Vector{LatLng}}\n\nDetermines the cell boundary in spherical coordinates for an H3 index.\n\n@param h3 The H3 index. @param cb The boundary of the H3 cell in spherical coordinates.\n\n\n\n\n\n","category":"function"},{"location":"API/#Index-inspection-functions","page":"API","title":"Index inspection functions","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"getResolution\ngetBaseCellNumber\nstringToH3\nh3ToString\nisValidCell\nisResClassIII\nisPentagon","category":"page"},{"location":"API/#H3.API.getResolution","page":"API","title":"H3.API.getResolution","text":"getResolution(h::H3Index)::Cint\n\nreturns the resolution of the provided H3 index Works on both cells and directed edges.\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.getBaseCellNumber","page":"API","title":"H3.API.getBaseCellNumber","text":"getBaseCellNumber(h::H3Index)::Cint\n\nreturns the base cell \"number\" (0 to 121) of the provided H3 cell\n\nNote: Technically works on H3 edges, but will return base cell of the origin cell.\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.stringToH3","page":"API","title":"H3.API.stringToH3","text":"stringToH3(str::String)::Union{H3ErrorCode, H3Index}\n\nConverts the string representation to H3Index (UInt64) representation.\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.h3ToString","page":"API","title":"H3.API.h3ToString","text":"h3ToString(h::H3Index)::String\n\nConverts the H3Index representation of the index to the string representation.\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.isValidCell","page":"API","title":"H3.API.isValidCell","text":"isValidCell(h::H3Index)::Bool\n\nconfirms if an H3Index is a valid cell (hexagon or pentagon) In particular, returns 0 (False) for H3 directed edges or invalid data\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.isResClassIII","page":"API","title":"H3.API.isResClassIII","text":"isResClassIII(h::H3Index)::Bool\n\ndetermines if a hexagon is Class III (or Class II)\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.isPentagon","page":"API","title":"H3.API.isPentagon","text":"isPentagon(h::H3Index)::Bool\n\ndetermines if an H3 cell is a pentagon\n\n\n\n\n\n","category":"function"},{"location":"API/#Grid-traversal-functions","page":"API","title":"Grid traversal functions","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"gridDisk\nmaxGridDiskSize\ngridDiskDistances\ngridDiskUnsafe\ngridDiskDistancesUnsafe\ngridDisksUnsafe\ngridRingUnsafe\ngridPathCells\ngridPathCellsSize\ngridDistance\ncellToLocalIj\nlocalIjToCell","category":"page"},{"location":"API/#H3.API.gridDisk","page":"API","title":"H3.API.gridDisk","text":"gridDisk(origin::H3Index, k::Int)::Union{H3ErrorCode, Vector{H3Index}}\n\nProduce cells within grid distance k of the origin cell.\n\nk-ring 0 is defined as the origin cell, k-ring 1 is defined as k-ring 0 and all neighboring cells, and so on.\n\nOutput is placed in the provided array in no particular order. Elements of the output array may be left zero, as can happen when crossing a pentagon.\n\n@param  origin   origin cell @param  k        k >= 0 @param  out      zero-filled array which must be of size maxGridDiskSize(k)\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.maxGridDiskSize","page":"API","title":"H3.API.maxGridDiskSize","text":"maxGridDiskSize(k::Int)::Union{H3ErrorCode, Int64}\n\nMaximum number of cells that result from the gridDisk algorithm with the given k. Formula source and proof: https://oeis.org/A003215\n\n@param   k   k value, k >= 0. @param out   size in indexes\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.gridDiskDistances","page":"API","title":"H3.API.gridDiskDistances","text":"gridDiskDistances(origin::H3Index, k::Int)::Union{H3ErrorCode, NamedTuple{(:out, :distances)}}\n\nk-rings produces indices within k distance of the origin index.\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.gridDiskUnsafe","page":"API","title":"H3.API.gridDiskUnsafe","text":"gridDiskUnsafe(origin::H3Index, k::Int)::Union{H3ErrorCode, Vector{H3Index}}\n\ngridDiskUnsafe produces indexes within k distance of the origin index. Output behavior is undefined when one of the indexes returned by this function is a pentagon or is in the pentagon distortion area.\n\nk-ring 0 is defined as the origin index, k-ring 1 is defined as k-ring 0 and all neighboring indexes, and so on.\n\nOutput is placed in the provided array in order of increasing distance from the origin.\n\n@param origin Origin location. @param k k >= 0 @param out Array which must be of size maxGridDiskSize(k). @return 0 if no pentagon or pentagonal distortion area was encountered.\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.gridDiskDistancesUnsafe","page":"API","title":"H3.API.gridDiskDistancesUnsafe","text":"gridDiskDistancesUnsafe(origin::H3Index, k::Int)::Union{H3ErrorCode, NamedTuple{(:out, :distances)}}\n\nhexRange produces indexes within k distance of the origin index.\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.gridDisksUnsafe","page":"API","title":"H3.API.gridDisksUnsafe","text":"gridDisksUnsafe(h3Set::Vector{H3Index}, k::Int)::Union{H3ErrorCode, Vector{H3Index}}\n\ngridDisksUnsafe takes an array of input hex IDs and a max k-ring and returns an array of hexagon IDs sorted first by the original hex IDs and then by the k-ring (0 to max), with no guaranteed sorting within each k-ring group.\n\n@param h3Set A pointer to an array of H3Indexes @param length The total number of H3Indexes in h3Set @param k The number of rings to generate @param out A pointer to the output memory to dump the new set of H3Indexes to            The memory block should be equal to maxGridDiskSize(k) * length @return 0 if no pentagon is encountered. Cannot trust output otherwise\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.gridRingUnsafe","page":"API","title":"H3.API.gridRingUnsafe","text":"gridRingUnsafe(origin::H3Index, k::Int)::Vector{H3Index}\n\nReturns the \"hollow\" ring of hexagons at exactly grid distance k from the origin hexagon. In particular, k=0 returns just the origin hexagon.\n\nA nonzero failure code may be returned in some cases, for example, if a pentagon is encountered. Failure cases may be fixed in future versions.\n\n@param origin Origin location. @param k k >= 0 @param out Array which must be of size 6 * k (or 1 if k == 0) @return 0 if successful; nonzero otherwise.\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.gridPathCells","page":"API","title":"H3.API.gridPathCells","text":"gridPathCells(origin::H3Index, destination::H3Index)::Union{H3ErrorCode, Vector{H3Index}}\n\nGiven two H3 indexes, return the line of indexes between them (inclusive).\n\nThis function may fail to find the line between two indexes, for example if they are very far apart. It may also fail when finding distances for indexes on opposite sides of a pentagon.\n\nNotes:\n\nThe specific output of this function should not be considered stable across library versions. The only guarantees the library provides are that the line length will be gridDistance(start, end) + 1 and that every index in the line will be a neighbor of the preceding index.\nLines are drawn in grid space, and may not correspond exactly to either Cartesian lines or great arcs.\n\n@param start Start index of the line @param end End index of the line @param out Output array, which must be of size gridPathCellsSize(start, end) @return 0 on success, or another value on failure.\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.gridPathCellsSize","page":"API","title":"H3.API.gridPathCellsSize","text":"gridPathCellsSize(origin::H3Index, destination::H3Index)::Union{H3ErrorCode, Int64}\n\nNumber of indexes in a line from the start index to the end index, to be used for allocating memory. Returns a negative number if the line cannot be computed.\n\n@param start Start index of the line @param end End index of the line @param size Size of the line @returns 0 on success, or another value on error\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.gridDistance","page":"API","title":"H3.API.gridDistance","text":"gridDistance(origin::H3Index, h::H3Index)::Union{H3ErrorCode, Int64}\n\nProduces the grid distance between the two indexes.\n\nThis function may fail to find the distance between two indexes, for example if they are very far apart. It may also fail when finding distances for indexes on opposite sides of a pentagon.\n\n@param origin Index to find the distance from. @param index Index to find the distance to. @return The distance, or a H3ErrorCode if the library could not compute the distance.\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.cellToLocalIj","page":"API","title":"H3.API.cellToLocalIj","text":"cellToLocalIj(origin::H3Index, h::H3Index)::Union{H3ErrorCode, CoordIJ}\n\nProduces ij coordinates for an index anchored by an origin.\n\nThe coordinate space used by this function may have deleted regions or warping due to pentagonal distortion.\n\nCoordinates are only comparable if they come from the same origin index.\n\nFailure may occur if the index is too far away from the origin or if the index is on the other side of a pentagon.\n\nThis function's output is not guaranteed to be compatible across different versions of H3.\n\n@param origin An anchoring index for the ij coordinate system. @param index Index to find the coordinates of @param mode Mode, must be 0 @param out ij coordinates of the index will be placed here on success @return 0 on success, or another value on failure.\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.localIjToCell","page":"API","title":"H3.API.localIjToCell","text":"localIjToCell(origin::H3Index, ij::CoordIJ)::Union{H3ErrorCode, H3Index}\n\nProduces an index for ij coordinates anchored by an origin.\n\nThe coordinate space used by this function may have deleted regions or warping due to pentagonal distortion.\n\nFailure may occur if the index is too far away from the origin or if the index is on the other side of a pentagon.\n\nThis function's output is not guaranteed to be compatible across different versions of H3.\n\n@param origin An anchoring index for the ij coordinate system. @param out ij coordinates to index. @param mode Mode, must be 0 @param index Index will be placed here on success. @return 0 on success, or another value on failure.\n\n\n\n\n\n","category":"function"},{"location":"API/#Hierarchical-grid-functions","page":"API","title":"Hierarchical grid functions","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"cellToParent\ncellToChildren\ncellToChildrenSize\ncompactCells\nuncompactCells\nuncompactCellsSize","category":"page"},{"location":"API/#H3.API.cellToParent","page":"API","title":"H3.API.cellToParent","text":"cellToParent(h::H3Index, parentRes::Int)::Union{H3ErrorCode, H3Index}\n\ncellToParent produces the parent index for a given H3 index\n\n@param h H3Index to find parent of @param parentRes The resolution to switch to (parent, grandparent, etc)\n\n@return H3Index of the parent, or H3_NULL if you actually asked for a child\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.cellToChildren","page":"API","title":"H3.API.cellToChildren","text":"cellToChildren(h::H3Index, childRes::Int)::Union{H3ErrorCode, Vector{H3Index}}\n\nprovides the children (or grandchildren, etc) of the given cell\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.cellToChildrenSize","page":"API","title":"H3.API.cellToChildrenSize","text":"cellToChildrenSize(h::H3Index, childRes::Int)::Union{H3ErrorCode, Int64}\n\ndetermines the exact number of children (or grandchildren, etc) that would be returned for the given cell\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.compactCells","page":"API","title":"H3.API.compactCells","text":"compactCells(h3Set::Vector{H3Index})::Union{H3ErrorCode, Vector{H3Index}}\n\ncompacts the given set of hexagons as best as possible\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.uncompactCells","page":"API","title":"H3.API.uncompactCells","text":"uncompactCells(compactedSet::Vector{H3Index}, res::Int)::Union{H3ErrorCode, Vector{H3Index}}\n\nuncompacts the compacted hexagon set\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.uncompactCellsSize","page":"API","title":"H3.API.uncompactCellsSize","text":"uncompactCellsSize(compactedSet::Vector{H3Index}, res::Int)::Union{H3ErrorCode, Int64}\n\ndetermines the exact number of hexagons that will be uncompacted from the compacted set\n\n\n\n\n\n","category":"function"},{"location":"API/#Unidirectional-edge-functions","page":"API","title":"Unidirectional edge functions","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"areNeighborCells\ncellsToDirectedEdge\nisValidDirectedEdge\ngetDirectedEdgeOrigin\ngetDirectedEdgeDestination\ndirectedEdgeToCells\noriginToDirectedEdges\ndirectedEdgeToBoundary","category":"page"},{"location":"API/#H3.API.areNeighborCells","page":"API","title":"H3.API.areNeighborCells","text":"areNeighborCells(origin::H3Index, destination::H3Index)::Union{H3ErrorCode, Bool}\n\nReturns whether or not the provided H3Indexes are neighbors. @param origin The origin H3 index. @param destination The destination H3 index. @param out Set to 1 if the indexes are neighbors, 0 otherwise @return Error code if the origin or destination are invalid or incomparable.\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.cellsToDirectedEdge","page":"API","title":"H3.API.cellsToDirectedEdge","text":"cellsToDirectedEdge(origin::H3Index, destination::H3Index)::Union{H3ErrorCode, H3Index}\n\nReturns a directed edge H3 index based on the provided origin and destination @param origin The origin H3 hexagon index @param destination The destination H3 hexagon index @return The directed edge H3Index, or H3_NULL on failure.\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.isValidDirectedEdge","page":"API","title":"H3.API.isValidDirectedEdge","text":"isValidDirectedEdge(edge::H3Index)::Bool\n\nreturns whether the H3Index is a valid directed edge\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.getDirectedEdgeOrigin","page":"API","title":"H3.API.getDirectedEdgeOrigin","text":"getDirectedEdgeOrigin(edge::H3Index)::Union{H3ErrorCode, H3Index}\n\nReturns the origin hexagon from the directed edge H3Index @param edge The edge H3 index @return The origin H3 hexagon index, or H3_NULL on failure\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.getDirectedEdgeDestination","page":"API","title":"H3.API.getDirectedEdgeDestination","text":"getDirectedEdgeDestination(edge::H3Index)::Union{H3ErrorCode, H3Index}\n\nReturns the destination hexagon from the directed edge H3Index @param edge The edge H3 index @return The destination H3 hexagon index, or H3_NULL on failure\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.directedEdgeToCells","page":"API","title":"H3.API.directedEdgeToCells","text":"directedEdgeToCells(edge::H3Index)::Union{H3ErrorCode, Tuple{H3Index, H3Index}}\n\nReturns the origin, destination pair of hexagon IDs for the given edge ID @param edge The directed edge H3Index @param originDestination Pointer to memory to store origin and destination IDs\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.originToDirectedEdges","page":"API","title":"H3.API.originToDirectedEdges","text":"originToDirectedEdges(origin::H3Index)::Union{H3ErrorCode, Vector{H3Index}}\n\nProvides all of the directed edges from the current H3Index. @param origin The origin hexagon H3Index to find edges for. @param edges The memory to store all of the edges inside.\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.directedEdgeToBoundary","page":"API","title":"H3.API.directedEdgeToBoundary","text":"directedEdgeToBoundary(edge::H3Index)::Union{H3ErrorCode, Vector{LatLng}}\n\nProvides the coordinates defining the directed edge. @param edge The directed edge H3Index @param cb The cellboundary object to store the edge coordinates.\n\n\n\n\n\n","category":"function"},{"location":"API/#Miscellaneous-H3-functions","page":"API","title":"Miscellaneous H3 functions","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"cellAreaRads2\ncellAreaKm2\ncellAreaM2\nedgeLengthKm\nedgeLengthM\ngetNumCells\ngetRes0Cells\nres0CellCount","category":"page"},{"location":"API/#H3.API.cellAreaRads2","page":"API","title":"H3.API.cellAreaRads2","text":"cellAreaRads2(cell::H3Index)::Union{H3ErrorCode, Cdouble}\n\nExact area of specific cell in square radiants.\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.cellAreaKm2","page":"API","title":"H3.API.cellAreaKm2","text":"cellAreaKm2(cell::H3Index)::Union{H3ErrorCode, Cdouble}\n\nExact area of specific cell in square kilometers.\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.cellAreaM2","page":"API","title":"H3.API.cellAreaM2","text":"cellAreaM2(res::Int)::Union{H3ErrorCode, Cdouble}\n\nExact area of specific cell in square meters.\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.edgeLengthKm","page":"API","title":"H3.API.edgeLengthKm","text":"edgeLengthKm(res::Int)::Union{H3ErrorCode, Cdouble}\n\nAverage hexagon edge length in kilometers at the given resolution.\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.edgeLengthM","page":"API","title":"H3.API.edgeLengthM","text":"edgeLengthM(res::Int)::Union{H3ErrorCode, Cdouble}\n\nAverage hexagon edge length in meters at the given resolution.\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.getNumCells","page":"API","title":"H3.API.getNumCells","text":"getNumCells(res::Int)::Union{H3ErrorCode, Int64}\n\nnumber of cells (hexagons and pentagons) for a given resolution\n\nIt works out to be 2 + 120*7^r for resolution r.\n\nMathematical notes\n\nLet h(n) be the number of children n levels below a single hexagon.\n\nThen h(n) = 7^n.\n\nLet p(n) be the number of children n levels below a single pentagon.\n\nThen p(0) = 1, and p(1) = 6, since each pentagon has 5 hexagonal immediate children and 1 pentagonal immediate child.\n\nIn general, we have the recurrence relation\n\np(n) = 5h(n-1) + p(n-1)      = 57^(n-1) + p(n-1).\n\nWorking through the recurrence, we get that\n\np(n) = 1 + 5\\sum_{k=1}^n 7^{k-1}      = 1 + 5(7^n - 1)/6,\n\nusing the closed form for a geometric series.\n\nUsing the closed forms for h(n) and p(n), we can get a closed form for the total number of cells at resolution r:\n\nc(r) = 12p(r) + 110h(r)      = 2 + 120*7^r.\n\n@param   res  H3 cell resolution\n\n@return       number of cells at resolution res\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.getRes0Cells","page":"API","title":"H3.API.getRes0Cells","text":"getRes0Cells()::Union{H3ErrorCode, Vector{H3Index}}\n\nAll the resolution 0 H3 indexes.\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.res0CellCount","page":"API","title":"H3.API.res0CellCount","text":"res0CellCount()::Cint\n\nreturns the number of resolution 0 cells (hexagons and pentagons)\n\n\n\n\n\n","category":"function"},{"location":"API/#Coordinate-Systems","page":"API","title":"Coordinate Systems","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"ijToIjk\nijkToHex2d\nijkToIj\nijkDistance\nijkNormalize\ncellToLocalIjk\nh3ToFaceIjk\nlocalIjkToCell\nfaceIjkToH3\nhex2dToCoordIJK\ngeoToVec3d\ngeoToFaceIjk","category":"page"},{"location":"API/#H3.API.ijToIjk","page":"API","title":"H3.API.ijToIjk","text":"ijToIjk(c::CoordIJ)::Union{H3ErrorCode, CoordIJK}\n\nTransforms coordinates from the IJ coordinate system to the IJK+ coordinate system.\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.ijkToHex2d","page":"API","title":"H3.API.ijkToHex2d","text":"ijkToHex2d(c::CoordIJK)::Vec2d\n\nFind the center point in 2D cartesian coordinates of a hex.\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.ijkToIj","page":"API","title":"H3.API.ijkToIj","text":"ijkToIj(c::CoordIJK)::CoordIJ\n\nTransforms coordinates from the IJK+ coordinate system to the IJ coordinate system.\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.ijkDistance","page":"API","title":"H3.API.ijkDistance","text":"ijkDistance(c1::CoordIJK, c2::CoordIJK)::Int\n\nFinds the distance between the two coordinates. Returns result.\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.ijkNormalize","page":"API","title":"H3.API.ijkNormalize","text":"ijkNormalize(c::CoordIJK)::CoordIJK\n\nNormalizes ijk coordinates by setting the components to the smallest possible values. Works in place.\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.cellToLocalIjk","page":"API","title":"H3.API.cellToLocalIjk","text":"cellToLocalIjk(origin::H3Index, h3::H3Index)::Union{H3ErrorCode, CoordIJK}\n\nProduces ijk+ coordinates for an index anchored by an origin.\n\nThe coordinate space used by this function may have deleted regions or warping due to pentagonal distortion.\n\nCoordinates are only comparable if they come from the same origin index.\n\nFailure may occur if the index is too far away from the origin or if the index is on the other side of a pentagon.\n\n@param origin An anchoring index for the ijk+ coordinate system. @param index Index to find the coordinates of @param out ijk+ coordinates of the index will be placed here on success @return 0 on success, or another value on failure.\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.h3ToFaceIjk","page":"API","title":"H3.API.h3ToFaceIjk","text":"h3ToFaceIjk(h::H3Index)::Union{H3ErrorCode, FaceIJK}\n\nConvert an H3Index to a FaceIJK address.\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.localIjkToCell","page":"API","title":"H3.API.localIjkToCell","text":"localIjkToCell(origin::H3Index, ijk::CoordIJK)::Union{H3ErrorCode, H3Index}\n\nProduces an index for ijk+ coordinates anchored by an origin.\n\nThe coordinate space used by this function may have deleted regions or warping due to pentagonal distortion.\n\nFailure may occur if the coordinates are too far away from the origin or if the index is on the other side of a pentagon.\n\n@param origin An anchoring index for the ijk+ coordinate system. @param ijk IJK+ Coordinates to find the index of @param out The index will be placed here on success @return 0 on success, or another value on failure.\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.faceIjkToH3","page":"API","title":"H3.API.faceIjkToH3","text":"faceIjkToH3(faceijk::FaceIJK, res::Int)::H3Index\n\nConvert an FaceIJK address to the corresponding H3Index.\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.hex2dToCoordIJK","page":"API","title":"H3.API.hex2dToCoordIJK","text":"hex2dToCoordIJK(v::Vec2d)::CoordIJK\n\nDetermine the containing hex in ijk+ coordinates for a 2D cartesian coordinate vector (from DGGRID).\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.geoToVec3d","page":"API","title":"H3.API.geoToVec3d","text":"geoToVec3d(geo::LatLng)::Vec3d\n\nCalculate the 3D coordinate on unit sphere from the latitude and longitude.\n\n\n\n\n\n","category":"function"},{"location":"API/#H3.API.geoToFaceIjk","page":"API","title":"H3.API.geoToFaceIjk","text":"geoToFaceIjk(geo::LatLng, res::Int)::FaceIJK\n\nEncodes a coordinate on the sphere to the FaceIJK address of the containing cell at the specified resolution.\n\n\n\n\n\n","category":"function"}]
}
